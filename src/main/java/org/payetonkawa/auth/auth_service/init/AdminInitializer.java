package org.payetonkawa.auth.auth_service.init;

import lombok.RequiredArgsConstructor;
import org.payetonkawa.auth.auth_service.model.Role;
import org.payetonkawa.auth.auth_service.model.Status;
import org.payetonkawa.auth.auth_service.model.User;
import org.payetonkawa.auth.auth_service.repository.RoleRepository;
import org.payetonkawa.auth.auth_service.repository.UserRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Configuration
@RequiredArgsConstructor
public class AdminInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(AdminInitializer.class);

    private final RoleRepository roleRepo;
    private final UserRepository userRepo;
    private final PasswordEncoder passwordEncoder;

    @Value("${admin.email:}")
    private String adminEmail;

    @Value("${admin.password:}")
    private String adminPassword;

    @Override
    public void run(String... args) {
        logger.info("üîß Initialisation de l'utilisateur admin...");

        if (adminEmail.isBlank()) {
            logger.warn("‚ùå Admin creation skipped: admin.email is missing.");
            return;
        }

        try {
            // G√©n√©ration du mot de passe temporaire si non fourni
            boolean isTempPassword = false;
            if (adminPassword == null || adminPassword.isBlank()) {
                adminPassword = generateRandomPassword(12);
                isTempPassword = true;
            }

            // R√©cup√©ration ou cr√©ation du r√¥le
            logger.debug("üîç Recherche du r√¥le 'ADMIN'...");
            Role adminRole = roleRepo.findByName("ADMIN")
                    .orElseGet(() -> {
                        logger.info("üÜï R√¥le 'ADMIN' introuvable, cr√©ation...");
                        return roleRepo.save(new Role("ADMIN"));
                    });

            // V√©rification de l'utilisateur admin
            logger.debug("üîç Recherche de l'utilisateur avec l'email '{}'", adminEmail);
            Optional<User> existingAdmin = userRepo.findByEmail(adminEmail);

            if (existingAdmin.isEmpty()) {
                logger.info("‚úÖ Aucun utilisateur admin trouv√©. Cr√©ation en cours...");

                User admin = new User();
                admin.setEmail(adminEmail);
                admin.setPassword(passwordEncoder.encode(adminPassword));
                admin.setFirstName("Admin");
                admin.setLastName("Account");
                admin.getRoles().add(adminRole);
                admin.setStatus(Status.ACTIVE); // Assurez-vous que le statut est actif
                admin.setCreatedAt(LocalDateTime.now());
                admin.setLastLogin(LocalDateTime.now()); // Initialiser lastLogin

                userRepo.save(admin);

                logger.info("‚úÖ Admin user created with email: {}", adminEmail);
                if (isTempPassword) {
                    logger.warn("üîê Mot de passe temporaire g√©n√©r√© pour l'admin : {}", adminPassword);
                } else {
                    logger.info("‚ÑπÔ∏è Un mot de passe personnalis√© a √©t√© utilis√© (non affich√©).");
                }
                logger.info("‚ö†Ô∏è Pensez √† changer le mot de passe apr√®s la premi√®re connexion.");
            } else {
                logger.info("‚ÑπÔ∏è L'utilisateur admin existe d√©j√† : {}", adminEmail);
            }

        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'initialisation de l'admin : {}", e.getMessage(), e);
        }
    }

    private String generateRandomPassword(int length) {
        final String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+";
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(chars.length());
            password.append(chars.charAt(index));
        }

        return password.toString();
    }
}
